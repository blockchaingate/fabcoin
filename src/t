Binary file bench/bench_fabcoin matches
cryptopp/misc.h:	T *p = s_pObject.load(std::memory_order_relaxed);
cryptopp/misc.h:	p = s_pObject.load(std::memory_order_relaxed);
cryptopp/misc.h:	s_pObject.store(newObject, std::memory_order_relaxed);
cuckoocache.h: * All operations are std::memory_order_relaxed so external mechanisms must
cuckoocache.h:        mem[s >> 3].fetch_or(1 << (s & 7), std::memory_order_relaxed);
cuckoocache.h:        mem[s >> 3].fetch_and(~(1 << (s & 7)), std::memory_order_relaxed);
cuckoocache.h:        return (1 << (s & 7)) & mem[s >> 3].load(std::memory_order_relaxed);
Binary file fabcoin-cli matches
Binary file fabcoind matches
Binary file fabcoin-tx matches
leveldb/port/atomic_pointer.h:    return rep_.load(std::memory_order_relaxed);
leveldb/port/atomic_pointer.h:    rep_.store(v, std::memory_order_relaxed);
Binary file libfabcoin_util.a matches
Binary file libfabcoin_util_a-random.o matches
net.cpp:    return nLastNodeId.fetch_add(1, std::memory_order_relaxed);
Binary file qt/fabcoin-qt matches
Binary file qt/test/test_fabcoin-qt matches
random.cpp:    assert(hwrand_initialized.load(std::memory_order_relaxed));
Binary file test/test_fabcoin_fuzzy matches
Binary file test/test_fabcoin matches
util.h:    return (logCategories.load(std::memory_order_relaxed) & category) != 0;
utiltime.cpp:    int64_t mocktime = nMockTime.load(std::memory_order_relaxed);
utiltime.cpp:    nMockTime.store(nMockTimeIn, std::memory_order_relaxed);
utiltime.cpp:    return nMockTime.load(std::memory_order_relaxed);
validation.cpp:    if (latchToFalse.load(std::memory_order_relaxed))
validation.cpp:    if (latchToFalse.load(std::memory_order_relaxed))
validation.cpp:    latchToFalse.store(true, std::memory_order_relaxed);
